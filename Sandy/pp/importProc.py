
import untangle
import pandas as pd

def untangle_file(file_name):
    obj = untangle.parse(file_name)
    return obj

def df_transform(obj_list, compress, trackProc, list_type):

    column_dict = {'mod':['TimeStamp','Address','Size','Path','Version','Company','Descr',
                                'PIDX','PID','PPID','PPIDX','AuthID','Create','Finish',
                                'IsVirt','Is64','Integ','Owner','ProcName','Path','cmd','Comp','Ver','Desc'],

                    ## Alternate event dictionary?
                   'eventAlt':['depth','address','path','location','ProcIdx','TOD','ProcName','PID',
                              'PPID','DateTime','Dur','CompTime','EventCls','Oper','Detail','Seq','ImgPath',
                              'Comp','Desc','Ver','User','AuthID','Sess','cmd','TID','Path','Cat'],

                   'event':['depth','address','path','location','ProcIdx','TOD','ProcName','PID',
                              'Oper','Path','Result','Detail','RelTime','Dur','CompTime'],


                  'home':['depth','address','path','location','ProcIdx','TOD','ProcName','PID',
                              'Oper','Path','Result','Detail']}

    if list_type == 'mod':
        if trackProc:
            df = pd.DataFrame(obj_list, columns=column_dict[list_type][7:])
        elif compress:
            df = pd.DataFrame(obj_list, columns=column_dict[list_type][:8])
        else:
            df = pd.DataFrame(obj_list, columns=column_dict[list_type])
    else:
        if trackProc:
            df = pd.DataFrame(obj_list, columns=column_dict[list_type][4:])
        elif not trackProc and compress:
            df = pd.DataFrame(obj_list, columns=column_dict[list_type][:5])
        else:
            df = pd.DataFrame(obj_list, columns=column_dict[list_type])

    return df

def import_mod(file_name, transform=True, compress=True, track_process=True):

    obj = untangle_file(file_name)
    obj_list = []

    if not track_process:
        for proc in range(len(obj.procmon.processlist.process)-1):

            try:
                for mod in obj.procmon.processlist.process[proc].children[-1].module: ## cycle through modules
                    lst = []
                    for elem in mod.children:
                        lst.append(elem.cdata)
                    if compress:
                        lst.append(proc)
                    else:
                        lst.extend(feat.cdata for feat in obj.procmon.processlist.process[proc].children[:-1])
                    obj_list.append(lst)

            except:
                lst = [0]*7
                if compress:
                    lst.append(proc)
                else:
                    lst.extend(feat.cdata for feat in obj.procmon.processlist.process[proc].children[:-1])
                obj_list.append(lst)
    else:
        for proc in range(len(obj.procmon.processlist.process)-1):
            lst = []

            for elem in obj.procmon.processlist.process[proc].children[:-1]:
                lst.append(elem.cdata)

            obj_list.append(lst)

    if transform:
        obj_list = df_transform(obj_list, compress, track_process, list_type='mod')

    return obj_list

def import_event(file_name, transform=True, compress=True, track_process=True, verbose=False):

    obj = untangle_file(file_name)
    obj_list = []

    if not track_process:

        for proc in range(len(obj.procmon.eventlist.event)-1):
            try:
                for frame in obj.procmon.eventlist.event[proc].children[-1].frame: ## cycle through modules
                    lst = []
                    for elem in frame.children:
                        lst.append(elem.cdata)
                    if compress:
                        lst.append(int(proc))
                    else:
                        lst.extend(feat.cdata for feat in obj.procmon.eventlist.event[proc].children[:-1])
                    obj_list.append(lst)

            except:
                lst = [0]*4
                if compress:
                    lst.append(int(proc))
                else:
                    lst.extend(feat.cdata for feat in obj.procmon.eventlist.event[proc].children[:-1])
                obj_list.append(lst)
    else:

        for proc in range(len(obj.procmon.eventlist.event)-1):
            lst = []

            for elem in obj.procmon.eventlist.event[proc].children[:-1]:
                lst.append(elem.cdata)

            obj_list.append(lst)

    if transform:

        obj_list = df_transform(obj_list, compress, track_process, list_type='home')

    return obj_list
