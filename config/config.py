
'''
Contains the configuration for data loading and training
'''

import os
import sys
import os.path as osp
import logging
import mlflow

from rich.logging import RichHandler


# Directory Config
BASE_PATH = osp.join(osp.dirname(__file__), os.pardir)
DATA_PATH = osp.join(BASE_PATH, 'data')
CONFIG_PATH = osp.join(BASE_PATH, 'config')
XML_PATH = osp.join(BASE_PATH, 'xml')
STORES_PATH = osp.join(BASE_PATH, "stores")
LOGS_PATH = osp.join(BASE_PATH, "logs")

# Create model stores
MODEL_REGISTRY = osp.join(STORES_PATH, 'model')
os.makedirs(MODEL_REGISTRY, exist_ok=True)
os.makedirs(osp.join(STORES_PATH, 'blob'), exist_ok=True)
    
# Create output directories
os.makedirs(DATA_PATH, exist_ok=True)
os.makedirs(CONFIG_PATH, exist_ok=True)
os.makedirs(XML_PATH, exist_ok=True)
os.makedirs(LOGS_PATH, exist_ok=True)

# MLFlow model registry
mlflow.set_tracking_uri("file://" + osp.abspath(MODEL_REGISTRY))

# Logger config and initialization
logging_config = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "minimal": {"format": "%(message)s"},
        "detailed": {
            "format": "%(levelname)s %(asctime)s [%(name)s:%(filename)s:%(funcName)s:%(lineno)d]\n%(message)s\n"
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "minimal",
            "level": logging.DEBUG,
        },
        "info": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": osp.join(LOGS_PATH, "info.log"),
            "maxBytes": 10485760,  # 1 MB
            "backupCount": 10,
            "formatter": "detailed",
            "level": logging.INFO,
        },
        "error": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": osp.join(LOGS_PATH, "error.log"),
            "maxBytes": 10485760,  # 1 MB
            "backupCount": 10,
            "formatter": "detailed",
            "level": logging.ERROR,
        },
    },
    "root": {
        "handlers": ["console", "info", "error"],
        "level": logging.INFO,
        "propagate": True,
    },
}
logging.config.dictConfig(logging_config)
logger = logging.getLogger()
logger.handlers[0] = RichHandler(markup=True)
