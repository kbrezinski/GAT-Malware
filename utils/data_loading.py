
import torch
import numpy as np

from torch.utils.data import Dataset, DataLoader, WeightedRandomSampler


class Dataset(Dataset):
    '''
    Vanilla torch DataLoader
    '''
    
    def __init__(self, X, y, get_neg=False):
        
        # batch seperately to include only neg training examples
        if get_neg: 
            isPos = (y == 1.)
            X = X[~isPos]
            y = y[~isPos]
            
        self.X = torch.from_numpy(X).type(torch.float32)
        self.y = torch.from_numpy(y).type(torch.float32)
        
        
    def __len__(self):  
        return len(self.X)
    
    def __getitem__(self, idx):
           
        # Select sample
        X = self.X[idx]
        y = self.y[idx]
            
        return X, y
    
    
def sampler_wrapper(y, batch_size=32, shuffle=False, sampler=None, replacement=False):
    '''
    Simple wrapper for Dataloader. Includes two modes:
        balanced: forces equal representation of both classes
         batched: deprecated
    '''
    
    # make sure sampler is used
    if not sampler: return None
    
    # sample weights for even distribution
    if sampler == 'balanced':
        numPos = np.array([len(np.where(y == t)[0]) for t in np.unique(y)])
        weight = 1. / numPos
        sample_weights = np.array([weight[t] for t in y])     
    
    return WeightedRandomSampler(sample_weights, len(y), replacement=replacement)


def get_data_generator(X, y, params, validation=False, get_neg=False):
    '''
    Fetches the torch dataloader given dataloader params
    '''
    loader = Dataset(X, y, get_neg=get_neg)
    
    # for validation just batch the whole dataset and remove sampler
    if validation:
        params['batch_size'] = len(loader)
        params['sampler'] = None
    
    # remove the sampler field since it doesn't exist in DataLoader and will throw an error
    loader_params = {k: params[k] for k in params.keys() - ['sampler', 'replacement']}
    
    return DataLoader(loader, sampler=sampler_wrapper(y, **params), **loader_params)
    
    